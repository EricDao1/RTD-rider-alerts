apply plugin: 'com.android.application'
apply plugin: 'jacoco'
//apply plugin: 'jacoco-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'

jacoco {
    toolVersion = '0.8.0'
}
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.msudenver.nighttrain.rtd_rider_alerts"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            //testCoverageEnabled true
        }

    }
    // https://stackoverflow.com/questions/52518378/more-than-one-file-was-found-with-os-independent-path-meta-inf-proguard-android
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/proguard/coroutines.pro'
    }
    testOptions {
        //execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests.includeAndroidResources = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    compileOptions {
        targetCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_1_8
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
    }
    buildToolsVersion = '28.0.3'
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"
    //implementation 'com.google.firebase:firebase-analytics:17.2.2'

    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    def room_version = "2.2.3"
    implementation "androidx.room:room-runtime:$room_version"
    // annotationProcessor "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    kapt "androidx.room:room-compiler:$room_version"

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    // espresso testing
    androidTestUtil 'com.android.support.test:orchestrator:1.1.0'
    androidTestImplementation "androidx.test:core:$rootProject.coreVersion"
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiautomatorVersion"
    androidTestImplementation 'com.google.truth:truth:1.0.1'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

    debugImplementation "androidx.fragment:fragment-testing:$rootProject.fragment_version"

    //androidTestImplementation 'org.mockito:mockito-core:2.11.0'
    //androidTestImplementation 'org.powermock:powermock-api-mockito:1.7.4'

    //regular testing
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test.ext:truth:1.2.0'
    testImplementation 'com.google.truth:truth:1.0.1'


    // https://developer.android.com/training/testing/unit-testing/local-unit-tests.html
    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'
    // Optional -- Robolectric environment
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    //?? https://stackoverflow.com/questions/53619024/attempted-to-use-androidjunit4-with-standard-junit-runner-and-delegate-runner-o
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:2.11.0'
    //testImplementation 'org.powermock:powermock-api-mockito:1.7.4'

    implementation 'com.android.support:recyclerview-v7:28.0.0'
}

//https://medium.com/@rafael_toledo/setting-up-an-unified-coverage-report-in-android-with-jacoco-robolectric-and-espresso-ffe239aaf3fa
//https://proandroiddev.com/unified-code-coverage-for-android-revisited-44789c9b722f
//https://github.com/mubstimor/integrationsdemo/blob/master/app/jacoco.gradle
//https://medium.com/@timothy.mubiru/automating-android-app-development-with-circleci-google-cloud-and-firebase-in-kotlin-e1daec7b6b4e
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group="Reporting"
    description="Generate Jacoco coverage reports for debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = ['**/R.class',
                    '**/R$*.class',
                    '**/*$ViewBinder*.*',
                    '**/*$InjectAdapter*.*',
                    '**/*Injector*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    '**/*Activity*.*',
                    '**/CiMattersApplication*.*',
                    'android/**/*.*']

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: excludes)
    def kotlinDebugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: excludes)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree],[kotlinDebugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}
